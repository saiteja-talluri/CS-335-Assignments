Observations
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Task 2.1: XOR Data set 

Hyperparamters:

learning rate = 0.3
batchsize = 4
number of epochs = 20
number of hidden layers = 1
number of nodes in hidden layer = 4
number of nodes in input layer = 2
number of nodes in output layer = 2

Accuaracy obtained = 94.89999999999999% (Seed value = 30)

Intuition :

In the XOR data set, we need to distinguish the four quadrants, so having four nodes in the hidden layer can help distinguish the four quadrants and two nodes in the output layer to choose the two quadrants corresponding to each label. So we get a net accuracy > 90% and this is the least topology we can get but it may take more epochs depending on seed value.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Task 2.2: SemiCircle Data set

Hyperparamters:

learning rate = 0.3
batchsize = 4
number of epochs = 20
number of hidden layers = 1
number of nodes in hidden layer = 2
number of nodes in input layer = 2
number of nodes in output layer = 2

Accuaracy obtained = 96.8% (Seed value = 30)

Intuition :

In the semicircle data set, most of the data is seperable by four straight lines(vertical diameter, vertical tangent in the right and two nearly tangential lines at the top). So having
two nodes in the hidden layer and two nodes in the output layer gives an accuracy > 95% and this is the least topology we can get.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Task 2.3: Compute Accuracy over MNIST (using Feed-Forward Neural Network)

Hyperparamters:

learning rate = 0.3
batchsize = 4
number of epochs = 20
number of hidden layers = 0
number of nodes in hidden layer = 0
number of nodes in input layer = 784
number of nodes in output layer = 10

Accuaracy obtained = 90.73% (Seed value = 30)

Intuition :

This was quite suprising as almost 90% accuracy was achieved without any hidden layer, although it was stagnated at 91% and for more accuracy we need to have a hidden layer.
This might be because most of the raw pixels data is being predicted by the 7840 weights into the 10 labels but for more fine tuning and to predict some digits written vaguely
we need more nodes in the hidden layer.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Task 2.4: Compute Accuracy over CIFAR (using Convolution Neural Network)

seed value = 30
learning rate = 0.25
batchsize = 32
number of epochs = 60
number of hidden layers = 5

1. Convolutional Layer : In_channels = (3,32,32), Filter size : (10,10), Number of filters = 10, Stride = 3
2. AvgPooling Layer : In_channels = (10,8,8), Filter size : (2,2), Stride = 3
3. Convolutional Layer : In_channels = (10,4,4), Filter size : (2,2), Number of filters = 15, Stride = 2
4. Flatten Layer
5. Fully Connected Layer : In_nodes = 60, Out_nodes = 10

Accuaracy obtained = 40.6% (Seed value = 30)

Intuition :

As such this might not be a minimal topology, because coming up with a minimal topology for this task requires lot of training, but I tried to keep the number of layers minimum by
getting proper accuracy, so I put 2 Convolutional Layers, 1 AvgPooling Layer and 1 Fully Connected Layer.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
